---
import PageHeader from "@components/PageHeader.astro";
import Tag from "@components/Tag.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

import fs from "fs";
import path from "path";
import { formatPostDate } from "src/utils";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.publishedOn.getTime() - a.data.publishedOn.getTime(),
);

const postsByYear = posts.reduce<Record<number, typeof posts>>((acc, post) => {
  const year = new Date(post.data.publishedOn).getFullYear();
  (acc[year] ||= []).push(post);
  return acc;
}, {});

const sortedPostsByYear = Object.entries(postsByYear).sort(
  ([a], [b]) => Number(b) - Number(a),
);

const tagCounts = posts.reduce<Record<string, number>>((acc, post) => {
  post.data.tags.forEach((tag) => (acc[tag] = (acc[tag] ?? 0) + 1));
  return acc;
}, {});

const lastUpdated = new Date(
  Math.max(
    fs
      .statSync(path.resolve(".", "src/pages/blog/index.astro"))
      .mtime.getTime(),
    new Date(posts[0]?.data.publishedOn ?? 0).getTime(),
  ),
);
---

<BaseLayout title="Blog • Udoh Jeremiah" description="Long-form posts">
  <main class="flex-1 space-y-12 px-8 py-20 lg:px-20">
    <PageHeader
      title="Blog"
      description=`
        "The purpose of a writer is to keep civilization from destroying
        itself." — Albert Camus
      `
      lastUpdated={lastUpdated}
    />
    <p>
      Blogs are medium (or sometimes lengthy), thoughtful, formal and
      well-structured content. It's where I share long-form content after days
      of rigorous refinement. You should read
      <a href="/blog/is-blogging-still-relevant-for-programmers">this</a> if you
      think blogging is no longer relevant for programmers.
    </p>
    <div class="space-y-2">
      <p class="text-sm font-semibold uppercase">Tags</p>
      <div class="flex flex-wrap items-center gap-4">
        <a
          href="/blog"
          class="[background:unset] [transition:unset] hover:opacity-80"
        >
          <Tag tag="all" count={posts.length} />
        </a>
        {
          Object.entries(tagCounts)
            .sort(([aTag], [bTag]) => aTag.localeCompare(bTag))
            .map(([tag, count]) => (
              <a
                href={`?tag=${encodeURIComponent(tag)}`}
                class="[background:unset] [transition:unset] hover:opacity-80"
              >
                <Tag tag={tag} count={count} />
              </a>
            ))
        }
      </div>
      <div class="space-y-4">
        {
          sortedPostsByYear.map(([year, posts]) => (
            <div>
              <h2 class="text-muted-foreground border-b px-2 py-4 text-end italic">
                {year}
              </h2>
              <ul>
                {posts.map((post) => (
                  <li data-tags={post.data.tags.join(",").toLowerCase()}>
                    <a
                      href={`/blog/${post.id}`}
                      class="hover:bg-muted hover:border-b-muted grid grid-cols-[1fr_auto] items-center gap-10 border-b px-2 py-4 whitespace-normal [background:unset] [transition:unset]"
                    >
                      <div class="flex flex-col gap-2 lg:flex-row lg:items-center">
                        <span>{post.data.title}</span>
                        <div class="flex flex-wrap items-center gap-2 lg:flex-nowrap">
                          {post.data.tags
                            .sort((a, b) => a.localeCompare(b))
                            .map((tag) => (
                              <Tag tag={tag} />
                            ))}
                        </div>
                      </div>
                      <time class="text-muted-foreground">
                        {formatPostDate(post.data.publishedOn)}
                      </time>
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))
        }
      </div>
    </div>
  </main>
  <script>
    const params = new URLSearchParams(window.location.search);
    const tag = params.get("tag")?.toLowerCase();
    const posts = document.querySelectorAll(
      "li[data-tags]",
    ) as NodeListOf<HTMLLIElement>;

    posts.forEach((post) => {
      const tags = post.dataset.tags?.split(",");
      const shouldShow = !tag || tags?.includes(tag);
      post.style.display = shouldShow ? "" : "none";
    });
  </script>
</BaseLayout>
